// src/screens/VisitFlowScreen.tsx

import React, { useReducer, useState, useRef, useEffect, useMemo } from 'react';

// --- İKONLAR ---
import {
    IdCard, Camera, Smartphone, FileText, PenLine, Send,
    ChevronRight, ShieldCheck, CheckCircle, XCircle, UserX, Clock,
    Loader2, ScanLine, Nfc, Maximize2, MapPin, Home, Building, Factory,
    Sparkles, Sun, BatteryCharging, Car
} from 'lucide-react';

// Customer tipi projenin başka bir yerinde tanımlı olabilir.
// O dosyada bu şekilde güncellenmesi GEREKİR:
/*
export type Customer = {
    id: number;
    name: string;
    address: string;
    district: string;
    phone: string;
    lat: number;
    lng: number;
    customerType: 'Mesken' | 'Ticarethane' | 'Sanayi'; // <-- Bu alan zorunlu
    isFreeConsumer: boolean; // <-- Bu alan zorunlu
};
*/
import { Customer } from '../RouteMap';


// --- TİPLER VE VERİLER ---

type Tariff = {
    id: string;
    name: string;
    unitPrice: number;
    type: Customer['customerType'][];
};

const ALL_TARIFFS: Tariff[] = [
    { id: 'standart_mesken', name: 'Standart Konut', unitPrice: 2.10, type: ['Mesken'] },
    { id: 'yesil_evim', name: 'Yeşil Evim', unitPrice: 2.25, type: ['Mesken'] },
    { id: 'is_yeri_eko', name: 'Ekonomik Ticarethane', unitPrice: 3.50, type: ['Ticarethane'] },
    { id: 'is_yeri_pro', name: 'Profesyonel Ticarethane', unitPrice: 3.35, type: ['Ticarethane'] },
    { id: 'sanayi_eko', name: 'Sanayi Avantaj', unitPrice: 3.10, type: ['Sanayi'] },
];

type VisitStatus='Pending'|'InProgress'|'Completed'|'Rejected'|'Unreachable'|'Postponed';
type FlowStep=1|2|3|4;
type VerificationStatus='idle'|'scanning'|'success'|'error';
type State={visitStatus:VisitStatus;currentStep:FlowStep;idPhoto:string|null;ocrStatus:VerificationStatus;nfcStatus:VerificationStatus;contractAccepted:boolean;smsSent:boolean;notes:string;};
type Action={type:'SET_VISIT_STATUS';payload:VisitStatus}|{type:'SET_STEP';payload:FlowStep}|{type:'SET_ID_PHOTO';payload:string|null}|{type:'SET_OCR_STATUS';payload:VerificationStatus}|{type:'SET_NFC_STATUS';payload:VerificationStatus}|{type:'SET_CONTRACT_ACCEPTED';payload:boolean}|{type:'SET_SMS_SENT';payload:boolean}|{type:'SET_NOTES';payload:string}|{type:'RESET'};
const initialState:State={visitStatus:'Pending',currentStep:1,idPhoto:null,ocrStatus:'idle',nfcStatus:'idle',contractAccepted:false,smsSent:false,notes:'',};
function visitReducer(state:State,action:Action):State{switch(action.type){case'SET_VISIT_STATUS':return{...initialState,visitStatus:action.payload,notes:state.notes};case'SET_STEP':return{...state,currentStep:action.payload};case'SET_ID_PHOTO':return{...state,idPhoto:action.payload};case'SET_OCR_STATUS':return{...state,ocrStatus:action.payload};case'SET_NFC_STATUS':return{...state,nfcStatus:action.payload};case'SET_CONTRACT_ACCEPTED':return{...state,contractAccepted:action.payload};case'SET_SMS_SENT':return{...state,smsSent:action.payload};case'SET_NOTES':return{...state,notes:action.payload};case'RESET':return initialState;default:return state;}}
type Props = { customer: Customer; onCloseToList: () => void; onCompleteVisit: (updated: Customer, status: VisitStatus, notes: string) => void; };

// --- ANA BİLEŞEN: VisitFlowScreen ---
const VisitFlowScreen: React.FC<Props> = ({ customer, onCloseToList, onCompleteVisit }) => {
    const [state, dispatch] = useReducer(visitReducer, initialState);
    const [currentScreen, setCurrentScreen] = useState<'checkin' | 'proposal' | 'flow'>('checkin');
    const handleSaveVisitResult = (status: VisitStatus) => { dispatch({ type: 'SET_VISIT_STATUS', payload: status }); if (status !== 'InProgress') { onCompleteVisit(customer, status, state.notes); onCloseToList(); } };
    const StepIndicator = () => ( <div className="flex items-center gap-2 mb-4"> {[1, 2, 3, 4].map(n => ( <div key={n} className={`h-2 rounded-full transition-colors ${state.currentStep >= n ? 'bg-[#0099CB]' : 'bg-gray-200'}`} style={{ width: 56 }} /> ))} </div> );
    return (
        <div className="p-6 max-w-4xl mx-auto bg-gray-50 min-h-screen">
            <div className="flex items-center justify-between mb-4"><h1 className="text-2xl font-bold text-gray-900">Ziyaret: {customer.name}</h1><button onClick={onCloseToList} className="text-gray-600 hover:text-gray-900 font-medium">← Listeye Dön</button></div>
            {currentScreen === 'checkin' && ( <CheckInScreen customer={customer} onContinue={() => setCurrentScreen('proposal')} /> )}
            {currentScreen === 'proposal' && ( <ProposalScreen customer={customer} onContinue={() => setCurrentScreen('flow')} /> )}
            {currentScreen === 'flow' && ( <> {state.visitStatus === 'Pending' && ( <VisitStatusSelection onSave={handleSaveVisitResult} notes={state.notes} setNotes={(notes) => dispatch({ type: 'SET_NOTES', payload: notes })} /> )} {state.visitStatus === 'InProgress' && ( <> <StepIndicator /> {state.currentStep === 1 && <CustomerInfoStep customer={customer} dispatch={dispatch} />} {state.currentStep === 2 && <IdVerificationStep state={state} dispatch={dispatch} />} {state.currentStep === 3 && <ContractStep state={state} dispatch={dispatch} customer={customer} />} {state.currentStep === 4 && <CompletionStep customer={customer} dispatch={dispatch} onComplete={() => handleSaveVisitResult('Completed')} />} </> )} </> )}
        </div>
    );
};

const CheckInScreen: React.FC<{ customer: Customer, onContinue: () => void }> = ({ customer, onContinue }) => { const [locationStatus, setLocationStatus] = useState<'idle' | 'getting' | 'success' | 'error'>('idle'); const [distance, setDistance] = useState<number | null>(null); const [error, setError] = useState<string | null>(null); const getDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => { const R = 6371e3; const φ1 = lat1 * Math.PI / 180; const φ2 = lat2 * Math.PI / 180; const Δφ = (lat2 - lat1) * Math.PI / 180; const Δλ = (lon2 - lon1) * Math.PI / 180; const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2); const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)); return R * c; }; useEffect(() => { setLocationStatus('getting'); setError(null); navigator.geolocation.getCurrentPosition( (position) => { const userLat = position.coords.latitude; const userLng = position.coords.longitude; const dist = getDistance(userLat, userLng, customer.lat, customer.lng); setDistance(dist); setLocationStatus('success'); }, (err) => { setError(`Konum alınamadı: ${err.message}`); setLocationStatus('error'); }, { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 } ); }, [customer.lat, customer.lng]); const renderStatus = () => { switch (locationStatus) { case 'getting': return <><Loader2 className="w-4 h-4 animate-spin" /> Konum alınıyor...</>; case 'error': return <><XCircle className="w-4 h-4 text-red-500" /> {error}</>; case 'success': if (distance === null) return null; const isClose = distance <= 200; return isClose ? ( <><CheckCircle className="w-4 h-4 text-green-500" /> Müşteri konumundasınız ({distance.toFixed(0)}m).</> ) : ( <><XCircle className="w-4 h-4 text-yellow-500" /> Müşteri konumundan uzaktasınız (~{ (distance / 1000).toFixed(1)} km).</> ); default: return null; } }; return ( <div className="bg-white rounded-xl shadow-sm p-6 animate-fade-in"> <div className="flex items-center gap-3 mb-4"><MapPin className="w-6 h-6 text-[#0099CB]" /><h3 className="text-xl font-semibold">Ziyaret Başlangıç Onayı</h3></div> <div className="space-y-4"><p className="text-gray-600">Teklif ekranına geçmeden önce, müşterinin lokasyonunda olduğunuzu doğrulamak için check-in yapın.</p><div className="p-4 bg-gray-100 rounded-lg"><p className="font-semibold">{customer.name}</p><p className="text-sm text-gray-700">{customer.address}, {customer.district}</p><div className="mt-2 flex items-center gap-2 text-sm font-medium">{renderStatus()}</div></div></div> <div className="mt-6 text-right"><button onClick={onContinue} className="bg-[#0099CB] text-white px-6 py-3 rounded-lg inline-flex items-center gap-2 hover:bg-[#007ca8] transition-colors">Check-in Yap ve Devam Et <ChevronRight className="w-4 h-4" /></button></div> </div> ); };
const LeadGenerationModal: React.FC<{ customer: Customer; onClose: () => void }> = ({ customer, onClose }) => { const [selectedSolutions, setSelectedSolutions] = useState<string[]>([]); const [kvkkAccepted, setKvkkAccepted] = useState(false); const [isSubmitted, setIsSubmitted] = useState(false); const handleSolutionToggle = (solution: string) => { setSelectedSolutions(prev => prev.includes(solution) ? prev.filter(s => s !== solution) : [...prev, solution] ); }; const handleSubmit = (e: React.FormEvent) => { e.preventDefault(); console.log("LEAD OLUŞTURULDU:", { customerId: customer.id, solutions: selectedSolutions, kvkk: kvkkAccepted }); setIsSubmitted(true); setTimeout(onClose, 3000); }; return ( <div className="fixed inset-0 bg-black/60 z-50 flex items-center justify-center p-4 animate-fade-in"> <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-lg relative"> <button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-gray-800"><XCircle className="w-6 h-6" /></button> {!isSubmitted ? ( <form onSubmit={handleSubmit}> <h3 className="text-xl font-semibold mb-2">Güneş Enerjisi Çözümleri Talep Formu</h3> <p className="text-sm text-gray-600 mb-4">Müşterinin ilgilendiği çözümleri işaretleyin.</p> <div className="mb-4 p-3 bg-gray-100 rounded-lg"><p className="font-medium">{customer.name}</p><p className="text-sm text-gray-700">{customer.phone}</p></div> <div className="mb-4"> <label className="font-medium">Talep Edilen Çözümler:</label> <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 mt-2"> {['Güneş Paneli', 'Depolama (Batarya)', 'Şarj İstasyonu (EV)'].map(sol => ( <label key={sol} className={`flex items-center gap-2 p-3 border rounded-lg cursor-pointer ${selectedSolutions.includes(sol) ? 'bg-yellow-100 border-yellow-400' : 'bg-white'}`}> <input type="checkbox" checked={selectedSolutions.includes(sol)} onChange={() => handleSolutionToggle(sol)} className="h-4 w-4 rounded text-yellow-500 focus:ring-yellow-400" /> {sol} </label> ))} </div> </div> <div className="mb-6"> <label className="flex items-start gap-2 text-sm text-gray-700"> <input type="checkbox" checked={kvkkAccepted} onChange={e => setKvkkAccepted(e.target.checked)} className="mt-1 h-4 w-4 rounded" /> <span>KVKK aydınlatma metnini okudum, anladım. Müşterinin verilerinin bu talep kapsamında işlenmesine ve kendisiyle iletişime geçilmesine onay verdiğini beyan ederim.</span> </label> </div> <button type="submit" disabled={!kvkkAccepted || selectedSolutions.length === 0} className="w-full bg-[#F9C800] text-gray-900 px-6 py-3 rounded-lg font-semibold disabled:bg-gray-300 disabled:cursor-not-allowed">Talep Oluştur</button> </form> ) : ( <div className="text-center py-8"> <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" /> <h3 className="text-2xl font-semibold">Talep Alındı!</h3> <p className="text-gray-600 mt-2">Müşteriniz en kısa sürede uzman ekibimiz tarafından aranacaktır.</p> </div> )} </div> </div> ); };

// --- GÜNCELLENMİŞ BİLEŞEN: ProposalScreen ---
const ProposalScreen: React.FC<{ customer: Customer; onContinue: () => void; }> = ({ customer, onContinue }) => {
    const FALLBACK_TARIFF: Tariff = { id: 'fallback', name: 'Lütfen Bir Tarife Seçin', unitPrice: 0, type: ['Mesken', 'Ticarethane', 'Sanayi'] };
    const [currentUnitPrice, setCurrentUnitPrice] = useState(2.20); 
    const [currentConsumption, setCurrentConsumption] = useState(150);
    
    const availableTariffs = useMemo(() => customer.customerType ? ALL_TARIFFS.filter(t => t.type.includes(customer.customerType)) : [], [customer.customerType]);
    
    const [selectedTariff, setSelectedTariff] = useState<Tariff>(availableTariffs[0] || FALLBACK_TARIFF);
    const [isLeadModalOpen, setIsLeadModalOpen] = useState(false);

    const currentMonthlyBill = currentUnitPrice * currentConsumption;
    const enerjisaMonthlyBill = selectedTariff.unitPrice * currentConsumption;
    const annualSavings = (currentMonthlyBill - enerjisaMonthlyBill) * 12;

    const CustomerTypeIcon = { Mesken: <Home className="w-6 h-6 text-gray-700" />, Ticarethane: <Building className="w-6 h-6 text-gray-700" />, Sanayi: <Factory className="w-6 h-6 text-gray-700" /> };
    
    return (
        <>
            <div className="bg-white rounded-xl shadow-sm p-6 animate-fade-in">
                <div className="flex justify-between items-start border-b pb-4 mb-4">
                    <div>
                        <h3 className="text-xl font-semibold">Teklif ve Tasarruf Simülasyonu</h3>
                        {customer.isFreeConsumer && (
                            <div className="mt-2 flex items-center gap-2 text-sm font-medium text-green-700 bg-green-50 p-2 rounded-md">
                                <ShieldCheck className="w-5 h-5" />
                                <span>Serbest Tüketici Olmaya Uygun</span>
                            </div>
                        )}
                    </div>
                    <div className="flex items-center gap-2 p-2 bg-gray-100 rounded-lg">
                        {customer.customerType ? CustomerTypeIcon[customer.customerType] : <UserX className="w-6 h-6 text-gray-500" />}
                        <span className="font-medium">{customer.customerType || 'Tip Belirtilmemiş'}</span>
                    </div>
                </div>
                
                <div className="grid md:grid-cols-2 gap-6">
                    <div className="p-4 border rounded-lg bg-gray-50">
                        <h4 className="font-semibold text-lg mb-3">Mevcut Durum</h4>
                        <div className="space-y-3">
                            <div><label className="text-sm font-medium">Birim Fiyat (TL/kWh)</label><input type="number" step="0.01" value={currentUnitPrice} onChange={e => setCurrentUnitPrice(parseFloat(e.target.value) || 0)} className="w-full mt-1 p-2 border rounded-lg" /></div>
                            <div><label className="text-sm font-medium">Aylık Tüketim (kWh)</label><input type="number" value={currentConsumption} onChange={e => setCurrentConsumption(parseInt(e.target.value) || 0)} className="w-full mt-1 p-2 border rounded-lg" /></div>
                            <div className="pt-2"><p className="text-sm text-gray-600">Tahmini Aylık Fatura</p><p className="text-2xl font-bold text-gray-800">{currentMonthlyBill.toFixed(2)} TL</p></div>
                        </div>
                    </div>
                    <div className="p-4 border-2 border-[#0099CB] rounded-lg bg-white">
                        <h4 className="font-semibold text-lg mb-3 text-[#007ca8]">Enerjisa Teklifi</h4>
                        <div className="space-y-3">
                            <div>
                                <label className="text-sm font-medium">Tarife Seçimi</label>
                                <select value={selectedTariff.id} onChange={e => setSelectedTariff(ALL_TARIFFS.find(t => t.id === e.target.value)!)} className="w-full mt-1 p-2 border rounded-lg" disabled={availableTariffs.length === 0}>
                                    {selectedTariff.id === 'fallback' && (<option value="fallback" disabled>{FALLBACK_TARIFF.name}</option>)}
                                    {availableTariffs.map(tariff => (<option key={tariff.id} value={tariff.id}>{tariff.name}</option>))}
                                </select>
                                {selectedTariff.id === 'yesil_evim' && (<p className="text-xs text-green-700 mt-1 flex items-center gap-1"><Sparkles className="w-3 h-3"/> Solar çözümlerde %10 indirim sağlar.</p>)}
                            </div>
                            <div><p className="text-sm text-gray-600">Birim Fiyat (TL/kWh)</p><p className="text-xl font-semibold">{selectedTariff.unitPrice.toFixed(2)} TL</p></div>
                            <div className="pt-2"><p className="text-sm text-gray-600">Enerjisa ile Tahmini Aylık Fatura</p><p className="text-2xl font-bold text-[#007ca8]">{enerjisaMonthlyBill.toFixed(2)} TL</p></div>
                        </div>
                    </div>
                </div>
                <div className="mt-6 p-4 rounded-lg bg-green-50 border border-green-200 text-center">
                    <p className="text-lg font-medium text-green-800">Yıllık Tahmini Tasarruf</p>
                    <p className="text-4xl font-bold text-green-700 my-2">{annualSavings > 0 ? `${annualSavings.toFixed(2)} TL` : (selectedTariff.id !== 'fallback' ? "Tasarruf Yok" : "-")}</p>
                </div>
                {selectedTariff.id === 'yesil_evim' && (<div className="mt-4 p-4 rounded-lg bg-yellow-50 border border-yellow-200 text-center animate-fade-in"><p className="font-medium text-yellow-800 mb-2">Güneş enerjisi çözümleriyle ilgileniyor musunuz?</p><button onClick={() => setIsLeadModalOpen(true)} className="bg-yellow-400 text-yellow-900 px-4 py-2 rounded-lg text-sm font-semibold hover:bg-yellow-500">Evet, Teklif İçin Talep Oluştur</button></div>)}
                <div className="mt-8 text-right"><button onClick={onContinue} className="bg-[#0099CB] text-white px-6 py-3 rounded-lg inline-flex items-center gap-2">Müzakere Sonucuna Git <ChevronRight className="w-4 h-4" /></button></div>
            </div>
            {isLeadModalOpen && (<LeadGenerationModal customer={customer} onClose={() => setIsLeadModalOpen(false)} />)}
        </>
    );
};

const VisitStatusSelection: React.FC<{ onSave: (status: VisitStatus) => void; notes: string; setNotes: (notes: string) => void; }> = ({ onSave, notes, setNotes }) => ( <div className="bg-white rounded-xl shadow-sm p-6 animate-fade-in"> <h3 className="text-lg font-semibold text-gray-800 mb-4">Ziyaret Sonucunu Belirtin</h3> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <button onClick={() => onSave('InProgress')} className="p-4 border rounded-lg text-left hover:bg-green-50 hover:border-green-400 transition-colors flex items-center gap-4"><CheckCircle className="w-8 h-8 text-green-500" /><div><p className="font-semibold text-green-800">Sözleşme Başlat</p><p className="text-sm text-gray-600">Müşteri teklifi kabul etti, sürece başla.</p></div></button> <button onClick={() => onSave('Rejected')} className="p-4 border rounded-lg text-left hover:bg-red-50 hover:border-red-400 transition-colors flex items-center gap-4"><XCircle className="w-8 h-8 text-red-500" /><div><p className="font-semibold text-red-800">Teklifi Reddetti</p><p className="text-sm text-gray-600">Müşteri teklifi istemedi.</p></div></button> <button onClick={() => onSave('Unreachable')} className="p-4 border rounded-lg text-left hover:bg-yellow-50 hover:border-yellow-400 transition-colors flex items-center gap-4"><UserX className="w-8 h-8 text-yellow-500" /><div><p className="font-semibold text-yellow-800">Ulaşılamadı</p><p className="text-sm text-gray-600">Müşteri adreste bulunamadı.</p></div></button> <button onClick={() => onSave('Postponed')} className="p-4 border rounded-lg text-left hover:bg-blue-50 hover:border-blue-400 transition-colors flex items-center gap-4"><Clock className="w-8 h-8 text-blue-500" /><div><p className="font-semibold text-blue-800">Ertelendi</p><p className="text-sm text-gray-600">Müşteri daha sonra görüşmek istedi.</p></div></button> </div> <div className="mt-6"> <label htmlFor="visitNotes" className="block text-sm font-medium text-gray-700 mb-1">Ziyaret Notları (Reddetme/Erteleme Sebebi vb.)</label> <textarea id="visitNotes" value={notes} onChange={(e) => setNotes(e.target.value)} rows={3} className="w-full p-2 border rounded-lg" placeholder="Örn: Müşteri mevcut sağlayıcısından memnun olduğunu belirtti." /> </div> </div> );
const CustomerInfoStep: React.FC<{ customer: Customer; dispatch: React.Dispatch<Action> }> = ({ customer, dispatch }) => ( <div className="bg-white rounded-xl shadow-sm p-6 animate-fade-in"> <div className="flex items-center gap-3 mb-4"><IdCard className="w-5 h-5 text-[#0099CB]" /><h3 className="text-lg font-semibold">1. Müşteri Bilgileri Kontrolü</h3></div> <div className="grid md:grid-cols-2 gap-4"> <div><label className="text-sm text-gray-600">Ad Soyad</label><input defaultValue={customer.name} className="w-full mt-1 p-2 border rounded-lg bg-gray-100" readOnly /></div> <div><label className="text-sm text-gray-600">Telefon</label><input defaultValue={customer.phone} className="w-full mt-1 p-2 border rounded-lg bg-gray-100" readOnly /></div> <div className="md:col-span-2"><label className="text-sm text-gray-600">Adres</label><input defaultValue={`${customer.address}, ${customer.district}`} className="w-full mt-1 p-2 border rounded-lg bg-gray-100" readOnly /></div> </div> <div className="mt-6 text-right"><button onClick={() => dispatch({ type: 'SET_STEP', payload: 2 })} className="bg-[#0099CB] text-white px-6 py-3 rounded-lg inline-flex items-center gap-2">Bilgiler Doğru, Devam Et <ChevronRight className="w-4 h-4" /></button></div> </div> );
const IdVerificationStep: React.FC<{ state: State; dispatch: React.Dispatch<Action> }> = ({ state, dispatch }) => { const [isBypassChecked, setIsBypassChecked] = useState(false); const [stream, setStream] = useState<MediaStream | null>(null); const videoRef = useRef<HTMLVideoElement | null>(null); const canvasRef = useRef<HTMLCanvasElement | null>(null); const [cameraError, setCameraError] = useState<string | null>(null); const startCamera = async () => { if (stream) { stream.getTracks().forEach(track => track.stop()); } setCameraError(null); try { const s = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } }); setStream(s); } catch (err: any) { setCameraError(`Kamera başlatılamadı: ${err.message}`); } }; const stopCamera = () => { if (stream) { stream.getTracks().forEach(track => track.stop()); setStream(null); } }; useEffect(() => { const videoElement = videoRef.current; if (videoElement && stream) { videoElement.srcObject = stream; videoElement.play().catch(error => { console.error("Video oynatma hatası:", error); setCameraError("Kamera başlatıldı ancak video otomatik oynatılamadı."); }); } return () => { if (stream) { stream.getTracks().forEach(track => track.stop()); } }; }, [stream]); const handleCaptureAndOcr = () => { const video = videoRef.current; const canvas = canvasRef.current; if (!video || !canvas) return; canvas.width = video.videoWidth; canvas.height = video.videoHeight; canvas.getContext('2d')?.drawImage(video, 0, 0); const photoDataUrl = canvas.toDataURL('image/jpeg'); dispatch({ type: 'SET_ID_PHOTO', payload: photoDataUrl }); dispatch({ type: 'SET_OCR_STATUS', payload: 'scanning' }); stopCamera(); setTimeout(() => { if (Math.random() < 0.8) { dispatch({ type: 'SET_OCR_STATUS', payload: 'success' }); } else { dispatch({ type: 'SET_OCR_STATUS', payload: 'error' }); dispatch({ type: 'SET_ID_PHOTO', payload: null }); } }, 2500); }; const handleNfcRead = () => { dispatch({ type: 'SET_NFC_STATUS', payload: 'scanning' }); setTimeout(() => { dispatch({ type: 'SET_NFC_STATUS', payload: 'success' }); }, 2000); }; const handleBypassToggle = (isChecked: boolean) => { setIsBypassChecked(isChecked); if (isChecked) { dispatch({ type: 'SET_OCR_STATUS', payload: 'success' }); dispatch({ type: 'SET_NFC_STATUS', payload: 'success' }); stopCamera(); } else { dispatch({ type: 'SET_OCR_STATUS', payload: 'idle' }); dispatch({ type: 'SET_NFC_STATUS', payload: 'idle' }); } }; const isVerified = state.ocrStatus === 'success' && state.nfcStatus === 'success'; return ( <div className="bg-white rounded-xl shadow-sm p-6 animate-fade-in"> <div className="flex items-center justify-between gap-3 mb-4"><div className="flex items-center gap-3"><ScanLine className="w-5 h-5 text-[#0099CB]" /><h3 className="text-lg font-semibold">2. Kimlik Doğrulama</h3></div><div className="flex items-center gap-2 p-2 rounded-lg bg-yellow-50 border border-yellow-300"><input type="checkbox" id="bypass-verification" checked={isBypassChecked} onChange={(e) => handleBypassToggle(e.target.checked)} className="h-4 w-4 rounded text-[#0099CB] focus:ring-[#0099CB]" /><label htmlFor="bypass-verification" className="text-sm font-medium text-yellow-800">[TEST] Doğrulamayı Atla</label></div></div> <fieldset disabled={isBypassChecked}><div className={`grid md:grid-cols-2 gap-6 items-start transition-opacity ${isBypassChecked ? 'opacity-40' : 'opacity-100'}`}><div><p className="text-sm font-medium text-gray-700 mb-2">Kimlik Fotoğrafı</p><div className="relative w-full aspect-video bg-black rounded-lg overflow-hidden flex items-center justify-center"><video ref={videoRef} className={`w-full h-full object-cover ${!stream ? 'hidden' : ''}`} autoPlay muted playsInline /><canvas ref={canvasRef} className="hidden" />{stream && <div className="absolute inset-0 border-[3px] border-dashed border-white/70 m-4 rounded-xl pointer-events-none" />}{!stream && state.idPhoto && <img src={state.idPhoto} alt="Çekilen Kimlik" className="w-full h-full object-contain" />}{!stream && !state.idPhoto && <div className="text-gray-400 p-4 text-center">Kamera kapalı veya izin bekleniyor.</div>}</div>{cameraError && <p className="text-red-600 text-sm mt-2">{cameraError}</p>}<div className="mt-4">{state.ocrStatus === 'idle' && (<button onClick={stream ? handleCaptureAndOcr : startCamera} className="w-full bg-[#0099CB] text-white px-4 py-2 rounded-lg flex items-center justify-center gap-2"><Camera className="w-4 h-4" /> {stream ? 'Fotoğraf Çek ve Doğrula' : 'Kamerayı Başlat'}</button>)}{state.ocrStatus === 'scanning' && <div className="text-center p-2"><Loader2 className="w-6 h-6 animate-spin mx-auto text-[#0099CB]" /> <p>Kimlik okunuyor...</p></div>}{state.ocrStatus === 'success' && <div className="text-center p-2 text-green-600 font-semibold flex items-center justify-center gap-2"><CheckCircle className="w-5 h-5"/> Kimlik başarıyla okundu.</div>}{state.ocrStatus === 'error' && (<div className="text-center p-2 text-red-600"><p className="font-semibold">Kimlik okunamadı!</p><p className="text-sm">Lütfen daha aydınlık bir ortamda, yansıma olmadan tekrar deneyin.</p><button onClick={() => dispatch({type: 'SET_OCR_STATUS', payload: 'idle'})} className="mt-2 text-sm bg-gray-200 px-3 py-1 rounded">Tekrar Dene</button></div>)}</div></div><div className={`transition-opacity duration-500 ${state.ocrStatus === 'success' ? 'opacity-100' : 'opacity-40 pointer-events-none'}`}><p className="text-sm font-medium text-gray-700 mb-2">Çipli Kimlik (NFC) Onayı</p><div className="p-4 border rounded-lg h-full flex flex-col justify-center items-center">{state.nfcStatus === 'idle' && <button onClick={handleNfcRead} className="bg-[#F9C800] text-gray-900 px-4 py-2 rounded-lg flex items-center gap-2"><Nfc className="w-5 h-5" /> NFC ile Oku</button>}{state.nfcStatus === 'scanning' && <div className="text-center p-2"><Loader2 className="w-6 h-6 animate-spin mx-auto text-[#F9C800]" /> <p>Telefonu kimliğe yaklaştırın...</p></div>}{state.nfcStatus === 'success' && <div className="text-center p-2 text-green-600 font-semibold flex items-center justify-center gap-2"><ShieldCheck className="w-5 h-5"/> NFC onayı başarılı.</div>}{state.nfcStatus === 'error' && <p className="text-red-600">NFC okunamadı.</p>}<p className="text-xs text-gray-500 mt-2 text-center">Bu adım, kimlikteki çipten bilgileri alarak güvenliği artırır.</p></div></div></div></fieldset> <div className="mt-6 flex justify-between"><button onClick={() => dispatch({ type: 'SET_STEP', payload: 1 })} className="px-4 py-2 rounded-lg bg-white border">Geri</button><button onClick={() => dispatch({ type: 'SET_STEP', payload: 3 })} disabled={!isVerified} className={`px-6 py-3 rounded-lg text-white ${isVerified ? 'bg-[#0099CB]' : 'bg-gray-300'}`}>Devam Et</button></div> </div> ); };
const ContractStep: React.FC<{ state: State; dispatch: React.Dispatch<Action>; customer: Customer }> = ({ state, dispatch, customer }) => { const [flowSmsPhone, setFlowSmsPhone] = useState(() => customer?.phone ?? ""); const [sigOpen, setSigOpen] = useState(false); const [contractOpen, setContractOpen] = useState(false); const [signatureDataUrl, setSignatureDataUrl] = useState<string | null>(null); const canContinue = state.contractAccepted && state.smsSent && !!signatureDataUrl; return ( <div className="bg-white rounded-xl shadow-sm p-6 animate-fade-in"> <div className="flex items-center gap-3 mb-4"><FileText className="w-5 h-5 text-[#0099CB]" /><h3 className="text-lg font-semibold">3. Sözleşme Onayı</h3></div> <div className="grid md:grid-cols-2 gap-6"> <div> <p className="text-sm text-gray-600 mb-2">Sözleşme Önizleme</p> <button type="button" onClick={() => setContractOpen(true)} className="w-full h-64 border rounded-lg bg-white overflow-hidden relative text-left" aria-label="Sözleşmeyi görüntüle"> <ContractMockPage customer={customer} signatureDataUrl={signatureDataUrl} scale="preview" /> <div className="absolute bottom-2 right-2 flex flex-col items-center pointer-events-none"><div className="h-8 w-8 rounded-full bg-[#F9C800] text-gray-900 shadow ring-1 ring-black/10 flex items-center justify-center"><Maximize2 className="h-4 w-4" /></div></div> </button> <label className="mt-4 flex items-center gap-2 text-sm cursor-pointer"><input type="checkbox" checked={state.contractAccepted} onChange={(e) => dispatch({ type: "SET_CONTRACT_ACCEPTED", payload: e.target.checked })} />Sözleşme koşullarını okudum ve onaylıyorum.</label> </div> <div> <p className="text-sm text-gray-600 mb-2">Dijital İmza</p> <div className="border rounded-lg p-2 bg-gray-50">{signatureDataUrl ? (<div className="flex items-center gap-3"><img src={signatureDataUrl} alt="İmza" className="h-[120px] w-auto bg-white rounded border" /><div className="flex flex-col gap-2"><button onClick={() => setSigOpen(true)} className="px-3 py-2 rounded-lg border bg-white text-sm">İmzayı Düzenle</button><button onClick={() => setSignatureDataUrl(null)} className="px-3 py-2 rounded-lg border bg-white text-sm">Temizle</button></div></div>) : (<div className="flex items-center justify-between gap-3"><div className="text-sm text-gray-500">Henüz imza yok.</div><button onClick={() => setSigOpen(true)} className="px-3 py-2 rounded-lg bg-[#0099CB] text-white text-sm">İmza Al</button></div>)}</div> <div className="mt-4"> <p className="text-sm text-gray-600 mb-2">SMS ile Onay</p> <div className="flex gap-2"><input value={flowSmsPhone} onChange={(e) => setFlowSmsPhone(e.target.value)} className="flex-1 p-2 border rounded-lg" placeholder="5XX XXX XX XX" /><button onClick={() => dispatch({ type: "SET_SMS_SENT", payload: true })} className="px-4 py-2 bg-[#F9C800] rounded-lg">SMS Gönder</button></div> {state.smsSent && (<div className="mt-2 flex items-center gap-2 text-green-700 text-sm"><ShieldCheck className="w-4 h-4" /> Onay SMS'i gönderildi.</div>)} </div> </div> </div> <div className="mt-6 flex justify-between"><button onClick={() => dispatch({ type: "SET_STEP", payload: 2 })} className="px-4 py-2 rounded-lg bg-white border">Geri</button><button onClick={() => dispatch({ type: "SET_STEP", payload: 4 })} disabled={!canContinue} className={`px-6 py-3 rounded-lg text-white ${canContinue ? "bg-[#0099CB]" : "bg-gray-300"}`}>Sözleşmeyi Onayla ve Bitir</button></div> {sigOpen && (<SignaturePadModal onClose={() => setSigOpen(false)} onSave={(dataUrl) => { setSignatureDataUrl(dataUrl); setSigOpen(false); }} />)} {contractOpen && (<ContractModal customer={customer} signatureDataUrl={signatureDataUrl} onClose={() => setContractOpen(false)} />)} </div> ); };
const CompletionStep: React.FC<{ customer: Customer; dispatch: React.Dispatch<Action>; onComplete: () => void; }> = ({ customer, dispatch, onComplete }) => ( <div className="bg-white rounded-xl shadow-sm p-6 text-center animate-fade-in"> <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" /> <h3 className="text-2xl font-semibold">Sözleşme Tamamlandı!</h3> <p className="text-gray-600 mt-2">Müşteri {customer.name} için elektrik satış sözleşmesi başarıyla oluşturulmuştur.</p> <div className="mt-6 flex justify-center gap-4"><button onClick={() => dispatch({ type: 'SET_STEP', payload: 3 })} className="px-4 py-2 rounded-lg bg-white border">Geri</button><button onClick={onComplete} className="px-8 py-3 rounded-lg bg-green-600 text-white font-semibold">Ziyareti Kaydet</button></div> </div> );
const SignaturePadModal: React.FC<{ onClose: () => void; onSave: (dataUrl: string) => void; }> = ({ onClose, onSave }) => { const canvasRef = useRef<HTMLCanvasElement | null>(null); useEffect(() => { const scrollY = window.scrollY; document.body.style.overflow = "hidden"; document.body.style.position = "fixed"; document.body.style.top = `-${scrollY}px`; document.body.style.width = "100%"; return () => { document.body.style.overflow = ""; document.body.style.position = ""; document.body.style.top = ""; document.body.style.width = ""; window.scrollTo(0, scrollY); }; }, []); const fitCanvas = () => { const canvas = canvasRef.current; if (!canvas) return; const dpr = window.devicePixelRatio || 1; const rect = canvas.getBoundingClientRect(); canvas.width = rect.width * dpr; canvas.height = rect.height * dpr; const ctx = canvas.getContext("2d"); if (ctx) { ctx.scale(dpr, dpr); ctx.fillStyle = "#fff"; ctx.fillRect(0, 0, rect.width, rect.height); } }; useEffect(() => { fitCanvas(); window.addEventListener("resize", fitCanvas); return () => window.removeEventListener("resize", fitCanvas); }, []); useEffect(() => { const canvas = canvasRef.current; if (!canvas) return; const ctx = canvas.getContext("2d"); if (!ctx) return; let drawing = false; const getPos = (e: PointerEvent) => { const rect = canvas.getBoundingClientRect(); return { x: e.clientX - rect.left, y: e.clientY - rect.top }; }; const down = (e: PointerEvent) => { drawing = true; const { x, y } = getPos(e); ctx.beginPath(); ctx.moveTo(x, y); }; const move = (e: PointerEvent) => { if (!drawing) return; const { x, y } = getPos(e); ctx.lineTo(x, y); ctx.strokeStyle = "#111"; ctx.lineWidth = 2; ctx.lineCap = "round"; ctx.stroke(); }; const up = () => { drawing = false; }; canvas.addEventListener("pointerdown", down); canvas.addEventListener("pointermove", move); canvas.addEventListener("pointerup", up); canvas.addEventListener("pointerleave", up); return () => { canvas.removeEventListener("pointerdown", down); canvas.removeEventListener("pointermove", move); canvas.removeEventListener("pointerup", up); canvas.removeEventListener("pointerleave", up); }; }, []); const handleClear = () => { const canvas = canvasRef.current; const ctx = canvas?.getContext("2d"); if (!canvas || !ctx) return; const rect = canvas.getBoundingClientRect(); ctx.clearRect(0, 0, rect.width, rect.height); ctx.fillStyle = "#fff"; ctx.fillRect(0, 0, rect.width, rect.height); }; const handleSave = () => { const canvas = canvasRef.current; if (!canvas) return; onSave(canvas.toDataURL("image/png")); }; return ( <div role="dialog" aria-modal="true" className="fixed inset-0 z-[10050] flex flex-col bg-black/50"> <div className="flex items-center justify-between bg-white px-4 py-3 border-b"><div className="font-semibold text-gray-900">İmza</div><div className="flex gap-2"><button onClick={handleClear} className="px-3 py-1.5 rounded border bg-white text-sm">Temizle</button><button onClick={handleSave} className="px-3 py-1.5 rounded bg-[#0099CB] text-white text-sm">Kaydet</button><button onClick={onClose} className="px-3 py-1.5 rounded border bg-white text-sm">Kapat</button></div></div> <div className="flex-1 bg-white"><canvas ref={canvasRef} className="h-full w-full" style={{ touchAction: 'none' }} /></div> </div> ); };
const ContractMockPage: React.FC<{ customer: Customer; signatureDataUrl: string | null; scale: "preview" | "full"; }> = ({ customer, signatureDataUrl, scale }) => { const base = scale === "full" ? { pad: "p-8", title: "text-2xl", body: "text-sm", small: "text-xs" } : { pad: "p-3", title: "text-base", body: "text-[10.5px]", small: "text-[9.5px]" }; const sigH = scale === "full" ? 100 : 44; const imgMaxH = Math.floor(sigH * 0.8); return ( <div className={`relative h-full w-full ${base.pad} bg-white`}><div className="text-center mb-2"><div className={`font-semibold ${base.title} text-gray-900`}>ELEKTRİK SATIŞ SÖZLEŞMESİ</div><div className={`${base.small} text-gray-500`}>Mock • Tek Sayfa</div></div><div className={`space-y-2 ${base.body} text-gray-800`}><p>İşbu sözleşme; <strong>{customer.name}</strong> ({customer.address}, {customer.district}) ile Enerjisa Satış A.Ş. arasında, elektrik tedariki kapsamındaki hak ve yükümlülükleri belirlemek üzere {new Date().toLocaleDateString()} tarihinde akdedilmiştir.</p><ol className="list-decimal ml-5 space-y-1"><li>Teslim noktasında ölçüm değerleri esas alınır.</li><li>Faturalandırma aylık dönemler itibarıyla yapılır.</li><li>Ödeme süresi fatura tebliğinden itibaren 10 gündür.</li></ol></div><div className="mt-6 pt-4 border-t"><div className="grid grid-cols-2 gap-4"><div className="flex flex-col"><div className="border-2 border-dashed border-gray-300 rounded bg-white flex items-center justify-center" style={{ height: sigH }}>{signatureDataUrl ? (<img src={signatureDataUrl} alt="Müşteri İmzası" style={{ maxHeight: imgMaxH, maxWidth: "90%" }} className="object-contain" />) : (<span className={`${base.small} text-gray-400`}>Müşteri İmzası</span>)}</div><div className={`${base.small} mt-1 text-gray-500 text-center`}>Müşteri İmzası</div></div><div className="flex flex-col"><div className="border-2 border-dashed border-gray-300 rounded bg-white flex items-center justify-center" style={{ height: sigH }}><span className={`${base.small} text-gray-400`}>Tedarikçi İmzası</span></div><div className={`${base.small} mt-1 text-gray-500 text-center`}>Tedarikçi İmzası</div></div></div></div></div> ); };
const ContractModal: React.FC<{ customer: Customer; signatureDataUrl: string | null; onClose: () => void; }> = ({ customer, signatureDataUrl, onClose }) => { useEffect(() => { const scrollY = window.scrollY; document.body.style.overflow = "hidden"; document.body.style.position = "fixed"; document.body.style.top = `-${scrollY}px`; return () => { document.body.style.overflow = ""; document.body.style.position = ""; document.body.style.top = ""; window.scrollTo(0, scrollY); }; }, []); return ( <div role="dialog" aria-modal="true" className="fixed inset-0 z-[10040] flex flex-col bg-black/50"> <div className="flex items-center justify-between bg-white px-4 py-3 border-b"><div className="font-semibold text-gray-900">Sözleşme — Önizleme</div><button onClick={onClose} className="px-3 py-1.5 rounded border bg-white text-sm">Kapat</button></div> <div className="flex-1 bg-gray-100 overflow-auto"><div className="mx-auto my-4 bg-white shadow border" style={{ width: 820, minHeight: 1160 }}><ContractMockPage customer={customer} signatureDataUrl={signatureDataUrl} scale="full" /></div></div> </div> ); };

export default VisitFlowScreen;