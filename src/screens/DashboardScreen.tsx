import React, { useMemo, useState } from 'react';
import { 
  Target, 
  CheckCircle, 
  Clock, 
  TrendingUp, 
  MapPin, 
  Calendar,
  Megaphone
} from 'lucide-react';
import VisitCard from '../components/VisitCard';
import type { Customer, SalesRep } from '../types';

type Props = {
  customers: Customer[];
  assignments: Record<string, string | undefined>;
  allReps: SalesRep[];
  setCurrentScreen: (screen: string) => void;
  onSelectCustomer: (customer: Customer) => void;
};

const DashboardScreen: React.FC<Props> = ({ customers, assignments, allReps, setCurrentScreen, onSelectCustomer }) => {
  const today = new Date().toISOString().split('T')[0];
  const time = new Date();

  // --- State for popup ---
  const [showAnnouncements, setShowAnnouncements] = useState(false);
  const announcements = [
    "‚ö° Yeni kampanya ba≈üladƒ±!",
    "üéØ Hedeflerini g√ºn sonunda tamamlamayƒ± unutma!",
    "üåç Enerjisa saha ekibi i√ßin √∂zel eƒüitim yarƒ±n ba≈ülƒ±yor!"
  ];

  // Bug√ºnk√º ziyaretler
  const todaysVisits = useMemo(() => {
    return customers.filter(c => c.visitDate === today);
  }, [customers, today]);

  // Tamamlanan ziyaretler
  const completedVisits = useMemo(() => {
    return todaysVisits.filter(c => c.status === 'Tamamlandƒ±');
  }, [todaysVisits]);

  // Bekleyen ziyaretler
  const pendingVisits = useMemo(() => {
    return todaysVisits.filter(c => c.status === 'Planlandƒ±');
  }, [todaysVisits]);

  // G√ºnl√ºk hedef
  const dailyTarget = 20;
  const completionRate = Math.round((completedVisits.length / dailyTarget) * 100);
  const conversionRate = Math.round((completedVisits.length / (todaysVisits.length || 1)) * 100);

  // --- Zaman bazlƒ± selamlama ---
  const hour = time.getHours();
  let greeting = "Ho≈ü geldin";
  if (hour >= 6 && hour < 12) greeting = "üåÖ G√ºnaydƒ±n";
  else if (hour >= 12 && hour < 17) greeting = "‚òÄÔ∏è Ho≈ü geldin";
  else if (hour >= 17 && hour < 21) greeting = "üåÜ ƒ∞yi ak≈üamlar";
  else greeting = "üåô ƒ∞yi geceler";

  // --- Motivasyon mesajlarƒ± ---
  const motivationalMessages = {
    high: ["üéâ Harikasƒ±n, hedefinin √ßoƒüunu tamamladƒ±n!", "üèÜ Bug√ºn m√ºkemmel gidiyorsun, az kaldƒ±!", "üåü Performansƒ±n zirvede, devam et!"],
    medium: ["üöÄ G√ºzel gidiyorsun, biraz daha gayretle hedefe ula≈üabilirsin.", "‚ö° ƒ∞yi ilerliyorsun, motivasyonu koru!", "üå± Hedefin i√ßin saƒülam adƒ±mlar atƒ±yorsun."],
    low: ["üí° Ba≈ülamak i√ßin harika bir zaman, ilk adƒ±mƒ± at!", "üî• G√ºn√ºn daha ba≈üƒ±ndasƒ±n, √ßok fƒ±rsat seni bekliyor.", "üïí Hedefe ula≈ümak i√ßin daha √ßok zamanƒ±n var, devam et!"],
    conversionHigh: ["ü•á Satƒ±≈ü d√∂n√º≈ü√ºm oranƒ±nda harikasƒ±n!", "üíé Ziyaretlerin satƒ±≈üa d√∂n√º≈ü√ºyor, tebrikler!", "üåü M√ºkemmel satƒ±≈ü performansƒ± yakaladƒ±n!"],
    conversionLow: ["ü§ù Satƒ±≈ü ≈üansƒ±nƒ± artƒ±rmak i√ßin m√º≈üterilerle g√ºven in≈üa et.", "üí° Daha √ßok teklif yaparak d√∂n√º≈ü√ºm√º artƒ±rabilirsin.", "üõ†Ô∏è K√º√ß√ºk dokunu≈ülarla satƒ±≈ü performansƒ±n y√ºkselebilir."]
  };

  function randomPick(arr: string[]) {
    return arr[Math.floor(Math.random() * arr.length)];
  }

  // Dinamik motivasyon se√ßimi
  let motivation = "";
  if (completionRate >= 80) motivation = randomPick(motivationalMessages.high);
  else if (completionRate >= 40) motivation = randomPick(motivationalMessages.medium);
  else motivation = randomPick(motivationalMessages.low);

  if (conversionRate >= 30) {
    motivation += " " + randomPick(motivationalMessages.conversionHigh);
  } else if (conversionRate > 0) {
    motivation += " " + randomPick(motivationalMessages.conversionLow);
  }

  return (
    <div className="space-y-6">
      {/* Ho≈ü geldin bloƒüu */}
      <div className="bg-gradient-to-r from-[#0099CB] to-[#007ca8] rounded-2xl p-6 text-white relative overflow-hidden">
        <div className="flex flex-col md:flex-row md:items-start md:justify-between">
          {/* Sol: selamlama + motivasyon */}
          <div>
            <h1 className="text-2xl font-bold mb-1">{greeting}, Ahmet!</h1>
            <p className="text-blue-100 mb-2">
              Bug√ºn {todaysVisits.length} ziyaretin var. Ba≈üarƒ±lƒ± bir g√ºn ge√ßir! üöÄ
            </p>
            <p className="text-yellow-200 text-sm">{motivation}</p>
          </div>

          {/* Saƒü: saat ve tarih */}
          <div className="text-right mt-4 md:mt-0 md:ml-6">
            <div className="text-3xl font-bold">
              {time.toLocaleTimeString("tr-TR", { hour: "2-digit", minute: "2-digit" })}
            </div>
            <div className="text-sm text-blue-100">
              {time.toLocaleDateString("tr-TR", {
                weekday: "long",
                day: "numeric",
                month: "long",
              })}
            </div>
          </div>
        </div>

        {/* Alt: duyuru barƒ± */}
        {announcements.length > 0 && (
          <div
            className="absolute bottom-0 left-0 w-full bg-black/20 text-white flex items-center gap-2 px-3 py-1 cursor-pointer overflow-hidden rounded-b-2xl"
            onClick={() => setShowAnnouncements(true)}
          >
            <Megaphone className="w-4 h-4 shrink-0 text-yellow-300" />
            <div className="flex-1 overflow-hidden">
              <div className="animate-marquee whitespace-nowrap text-sm">
                {announcements.join(" | ")}
              </div>
            </div>
          </div>
        )}
      </div>

      {/* KPI Kartlarƒ± */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        <KPICard title="G√ºnl√ºk Hedef" value={`${completedVisits.length}/${dailyTarget}`} subtitle={`%${completionRate} tamamlandƒ±`} icon={<Target className="w-6 h-6" />} color="bg-[#0099CB]" />
        <KPICard title="Tamamlanan" value={completedVisits.length.toString()} subtitle="Bug√ºn" icon={<CheckCircle className="w-6 h-6" />} color="bg-green-500" />
        <KPICard title="Bekleyen" value={pendingVisits.length.toString()} subtitle="Ziyaret" icon={<Clock className="w-6 h-6" />} color="bg-yellow-500" />
        <KPICard title="Haftalƒ±k" value={`%${completionRate}`} subtitle={`${completedVisits.length}/${dailyTarget} tamamlandƒ±`} icon={<TrendingUp className="w-6 h-6" />} color="bg-purple-500" />
      </div>

      {/* Bug√ºnk√º Program */}
      <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-center gap-2 mb-4">
          <Calendar className="w-5 h-5 text-[#0099CB]" />
          <h2 className="text-lg font-semibold">Bug√ºnk√º Program</h2>
        </div>
        
        {todaysVisits.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <MapPin className="w-12 h-12 mx-auto mb-2 text-gray-300" />
            <p>Bug√ºn i√ßin planlanmƒ±≈ü ziyaret yok</p>
          </div>
        ) : (
          <div className="space-y-4">
            {todaysVisits.slice(0, 5).map((customer) => (
              <VisitCard
                key={customer.id}
                customer={customer}
                assignedName={assignments[customer.id] ? allReps.find(r => r.id === assignments[customer.id])?.name : undefined}
                onDetail={() => onSelectCustomer(customer)}
                onStart={() => {
                  onSelectCustomer(customer);
                  setCurrentScreen('visitFlow');
                }}
              />
            ))}
            {todaysVisits.length > 5 && (
              <div className="text-center pt-4">
                <button onClick={() => setCurrentScreen('visits')} className="text-sm text-[#0099CB] hover:underline font-medium">
                  +{todaysVisits.length - 5} ziyaret daha... (T√ºm√ºn√º G√∂r)
                </button>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Popup */}
      {showAnnouncements && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl shadow-lg max-w-md w-full p-6">
            <h2 className="text-lg font-semibold mb-4">üì¢ Duyurular</h2>
            <ul className="space-y-2 text-gray-700">
              {announcements.map((a, i) => (
                <li key={i}>{a}</li>
              ))}
            </ul>
            <button onClick={() => setShowAnnouncements(false)} className="mt-4 px-4 py-2 bg-[#0099CB] text-white rounded-lg hover:bg-[#0088b8]">
              Kapat
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

const KPICard: React.FC<{ title: string; value: string; subtitle: string; icon: React.ReactNode; color: string; }> = ({ title, value, subtitle, icon, color }) => (
  <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4">
    <div className="flex items-center justify-between mb-2">
      <div className={`p-2 rounded-lg ${color} text-white`}>{icon}</div>
    </div>
    <div className="space-y-1">
      <p className="text-sm text-gray-600">{title}</p>
      <p className="text-2xl font-bold text-gray-900">{value}</p>
      <p className="text-xs text-gray-500">{subtitle}</p>
    </div>
  </div>
);

export default DashboardScreen;
