// vite.config.ts
import { defineConfig, loadEnv } from "file:///home/project/node_modules/vite/dist/node/index.js";
import react from "file:///home/project/node_modules/@vitejs/plugin-react/dist/index.js";
import { ImageAnnotatorClient } from "file:///home/project/node_modules/@google-cloud/vision/build/src/index.js";
function readBody(req) {
  return new Promise((resolve, reject) => {
    let body = "";
    req.on("data", (chunk) => {
      body += chunk.toString();
    });
    req.on("end", () => {
      try {
        resolve(JSON.parse(body));
      } catch (e) {
        reject(new Error("Ge\xE7ersiz JSON format\u0131."));
      }
    });
    req.on("error", reject);
  });
}
var vite_config_default = defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), "");
  return {
    plugins: [
      react(),
      {
        name: "google-cloud-vision-proxy",
        configureServer(server) {
          server.middlewares.use("/api/ocr", async (req, res, next) => {
            if (req.method !== "POST") {
              return next();
            }
            try {
              const client = new ImageAnnotatorClient({
                credentials: {
                  client_email: env.GOOGLE_CLIENT_EMAIL,
                  private_key: env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, "\n")
                  // .env'deki \n karakterlerini gerçek satır sonuna çevir
                }
              });
              const { image } = await readBody(req);
              if (!image) {
                res.statusCode = 400;
                return res.end(JSON.stringify({ message: "Resim verisi (image) bulunamad\u0131." }));
              }
              const base64Image = image.replace(/^data:image\/\w+;base64,/, "");
              const request = {
                image: { content: base64Image },
                features: [{ type: "DOCUMENT_TEXT_DETECTION" }]
              };
              const [result] = await client.documentTextDetection(request);
              const text = result.fullTextAnnotation?.text || "";
              res.setHeader("Content-Type", "application/json");
              res.end(JSON.stringify({ text }));
            } catch (error) {
              console.error("Cloud Vision Proxy Hatas\u0131:", error);
              res.statusCode = 500;
              res.end(JSON.stringify({ message: "Cloud Vision API \xE7a\u011Fr\u0131l\u0131rken sunucu hatas\u0131 olu\u015Ftu.", error: error.message }));
            }
          });
        }
      }
    ],
    // Senin orijinal ayarını koruyoruz
    optimizeDeps: {
      exclude: ["lucide-react"]
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCIvaG9tZS9wcm9qZWN0XCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvaG9tZS9wcm9qZWN0L3ZpdGUuY29uZmlnLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9ob21lL3Byb2plY3Qvdml0ZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIGxvYWRFbnYgfSBmcm9tICd2aXRlJztcbmltcG9ydCByZWFjdCBmcm9tICdAdml0ZWpzL3BsdWdpbi1yZWFjdCc7XG5pbXBvcnQgeyBJbWFnZUFubm90YXRvckNsaWVudCB9IGZyb20gJ0Bnb29nbGUtY2xvdWQvdmlzaW9uJztcblxuLy8gTm9kZS5qcydpbiAnaHR0cCcgaXN0ZVx1MDExRmluaW4gZ1x1MDBGNnZkZXNpbmkgKGJvZHkpIG9rdW1hayBpXHUwMEU3aW4gYmlyIHlhcmRcdTAxMzFtY1x1MDEzMSBmb25rc2l5b25cbi8vIFZpdGUnXHUwMTMxbiBnZWxpXHUwMTVGdGlybWUgc3VudWN1c3VuZGEgRXhwcmVzcyBnaWJpIGRhaGlsaSBiaXIgYm9keS1wYXJzZXIgb2xtYWRcdTAxMzFcdTAxMUZcdTAxMzEgaVx1MDBFN2luIGJ1IGdlcmVrbGlkaXIuXG5mdW5jdGlvbiByZWFkQm9keShyZXEpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgYm9keSA9ICcnO1xuICAgIHJlcS5vbignZGF0YScsIGNodW5rID0+IHtcbiAgICAgIGJvZHkgKz0gY2h1bmsudG9TdHJpbmcoKTtcbiAgICB9KTtcbiAgICByZXEub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShib2R5KSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJHZVx1MDBFN2Vyc2l6IEpTT04gZm9ybWF0XHUwMTMxLlwiKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVxLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gIH0pO1xufVxuXG4vLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4ge1xuICAvLyAuZW52IGRvc3lhc1x1MDEzMW5kYWtpIG9ydGFtIGRlXHUwMTFGaVx1MDE1RmtlbmxlcmluaSBOb2RlLmpzIHRhcmFmXHUwMTMxbmRhIGdcdTAwRkN2ZW5saSBiaXIgXHUwMTVGZWtpbGRlIHlcdTAwRkNrbGVcbiAgLy8gJ3Byb2Nlc3MuY3dkKCknIHByb2plbmluIGtcdTAwRjZrIGRpemluaW5pIGJlbGlydGlyLiAnJyBcdTAwRjZuIGVraSB0XHUwMEZDbSBkZVx1MDExRmlcdTAxNUZrZW5sZXJpIHlcdTAwRkNrbGVyLlxuICBjb25zdCBlbnYgPSBsb2FkRW52KG1vZGUsIHByb2Nlc3MuY3dkKCksICcnKTtcblxuICByZXR1cm4ge1xuICAgIHBsdWdpbnM6IFtcbiAgICAgIHJlYWN0KCksXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdnb29nbGUtY2xvdWQtdmlzaW9uLXByb3h5JyxcbiAgICAgICAgY29uZmlndXJlU2VydmVyKHNlcnZlcikge1xuICAgICAgICAgIC8vICcvYXBpL29jcicgYWRyZXNpbmUgZ2VsZW4gaXN0ZWtsZXJpIGRpbmxleWVjZWsgYmlyIG1pZGRsZXdhcmUgKGFyYWNcdTAxMzEgeWF6XHUwMTMxbFx1MDEzMW0pIG9sdVx1MDE1RnR1clxuICAgICAgICAgIHNlcnZlci5taWRkbGV3YXJlcy51c2UoJy9hcGkvb2NyJywgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICAvLyBTYWRlY2UgUE9TVCBtZXRvZHVuYSBpemluIHZlclxuICAgICAgICAgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpOyAvLyBFXHUwMTFGZXIgUE9TVCBkZVx1MDExRmlsc2UsIGlcdTAxNUZsZW1pIFZpdGUnXHUwMTMxbiBkaVx1MDExRmVyIG1pZGRsZXdhcmUnbGVyaW5lIGRldnJldFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyBHb29nbGUgQ2xvdWQgVmlzaW9uIGlzdGVtY2lzaW5pLCAuZW52J2RlbiB5XHUwMEZDa2xlZGlcdTAxMUZpbWl6IGhpem1ldCBoZXNhYlx1MDEzMSBiaWxnaWxlcml5bGUgYmFcdTAxNUZsYXRcbiAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gbmV3IEltYWdlQW5ub3RhdG9yQ2xpZW50KHtcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczoge1xuICAgICAgICAgICAgICAgICAgY2xpZW50X2VtYWlsOiBlbnYuR09PR0xFX0NMSUVOVF9FTUFJTCxcbiAgICAgICAgICAgICAgICAgIHByaXZhdGVfa2V5OiBlbnYuR09PR0xFX1BSSVZBVEVfS0VZLnJlcGxhY2UoL1xcXFxuL2csICdcXG4nKSwgLy8gLmVudidkZWtpIFxcbiBrYXJha3RlcmxlcmluaSBnZXJcdTAwRTdlayBzYXRcdTAxMzFyIHNvbnVuYSBcdTAwRTdldmlyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvLyBGcm9udGVuZCdkZW4gZ2VsZW4gaXN0ZVx1MDExRmluIGdcdTAwRjZ2ZGVzaW5pIG9rdVxuICAgICAgICAgICAgICBjb25zdCB7IGltYWdlIH0gPSBhd2FpdCByZWFkQm9keShyZXEpO1xuICAgICAgICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiBcIlJlc2ltIHZlcmlzaSAoaW1hZ2UpIGJ1bHVuYW1hZFx1MDEzMS5cIiB9KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIEJhc2U2NCBiYVx1MDE1RmxcdTAxMzFcdTAxMUZcdTAxMzFuXHUwMTMxIHRlbWl6bGVcbiAgICAgICAgICAgICAgY29uc3QgYmFzZTY0SW1hZ2UgPSBpbWFnZS5yZXBsYWNlKC9eZGF0YTppbWFnZVxcL1xcdys7YmFzZTY0LC8sICcnKTtcblxuICAgICAgICAgICAgICAvLyBHb29nbGUnYSBnXHUwMEY2bmRlcmlsZWNlayBpc3RlXHUwMTFGaSBoYXpcdTAxMzFybGFcbiAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgICAgICAgICBpbWFnZTogeyBjb250ZW50OiBiYXNlNjRJbWFnZSB9LFxuICAgICAgICAgICAgICAgIGZlYXR1cmVzOiBbeyB0eXBlOiAnRE9DVU1FTlRfVEVYVF9ERVRFQ1RJT04nIH1dLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gXHUwMTMwc3RlXHUwMTFGaSBnXHUwMEY2bmRlciB2ZSBzb251Y3UgYWxcbiAgICAgICAgICAgICAgY29uc3QgW3Jlc3VsdF0gPSBhd2FpdCBjbGllbnQuZG9jdW1lbnRUZXh0RGV0ZWN0aW9uKHJlcXVlc3QpO1xuICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcmVzdWx0LmZ1bGxUZXh0QW5ub3RhdGlvbj8udGV4dCB8fCAnJztcblxuICAgICAgICAgICAgICAvLyBCYVx1MDE1RmFyXHUwMTMxbFx1MDEzMSBzb251Y3UgSlNPTiBvbGFyYWsgZnJvbnRlbmQnZSBnXHUwMEY2bmRlclxuICAgICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgICAgICByZXMuZW5kKEpTT04uc3RyaW5naWZ5KHsgdGV4dCB9KSk7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDbG91ZCBWaXNpb24gUHJveHkgSGF0YXNcdTAxMzE6XCIsIGVycm9yKTtcbiAgICAgICAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA1MDA7XG4gICAgICAgICAgICAgIHJlcy5lbmQoSlNPTi5zdHJpbmdpZnkoeyBtZXNzYWdlOiAnQ2xvdWQgVmlzaW9uIEFQSSBcdTAwRTdhXHUwMTFGclx1MDEzMWxcdTAxMzFya2VuIHN1bnVjdSBoYXRhc1x1MDEzMSBvbHVcdTAxNUZ0dS4nLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgLy8gU2VuaW4gb3JpamluYWwgYXlhclx1MDEzMW5cdTAxMzEga29ydXlvcnV6XG4gICAgb3B0aW1pemVEZXBzOiB7XG4gICAgICBleGNsdWRlOiBbJ2x1Y2lkZS1yZWFjdCddLFxuICAgIH0sXG4gIH07XG59KTsiXSwKICAibWFwcGluZ3MiOiAiO0FBQXlOLFNBQVMsY0FBYyxlQUFlO0FBQy9QLE9BQU8sV0FBVztBQUNsQixTQUFTLDRCQUE0QjtBQUlyQyxTQUFTLFNBQVMsS0FBSztBQUNyQixTQUFPLElBQUksUUFBUSxDQUFDLFNBQVMsV0FBVztBQUN0QyxRQUFJLE9BQU87QUFDWCxRQUFJLEdBQUcsUUFBUSxXQUFTO0FBQ3RCLGNBQVEsTUFBTSxTQUFTO0FBQUEsSUFDekIsQ0FBQztBQUNELFFBQUksR0FBRyxPQUFPLE1BQU07QUFDbEIsVUFBSTtBQUNGLGdCQUFRLEtBQUssTUFBTSxJQUFJLENBQUM7QUFBQSxNQUMxQixTQUFTLEdBQUc7QUFDVixlQUFPLElBQUksTUFBTSxnQ0FBd0IsQ0FBQztBQUFBLE1BQzVDO0FBQUEsSUFDRixDQUFDO0FBQ0QsUUFBSSxHQUFHLFNBQVMsTUFBTTtBQUFBLEVBQ3hCLENBQUM7QUFDSDtBQUdBLElBQU8sc0JBQVEsYUFBYSxDQUFDLEVBQUUsS0FBSyxNQUFNO0FBR3hDLFFBQU0sTUFBTSxRQUFRLE1BQU0sUUFBUSxJQUFJLEdBQUcsRUFBRTtBQUUzQyxTQUFPO0FBQUEsSUFDTCxTQUFTO0FBQUEsTUFDUCxNQUFNO0FBQUEsTUFDTjtBQUFBLFFBQ0UsTUFBTTtBQUFBLFFBQ04sZ0JBQWdCLFFBQVE7QUFFdEIsaUJBQU8sWUFBWSxJQUFJLFlBQVksT0FBTyxLQUFLLEtBQUssU0FBUztBQUUzRCxnQkFBSSxJQUFJLFdBQVcsUUFBUTtBQUN6QixxQkFBTyxLQUFLO0FBQUEsWUFDZDtBQUVBLGdCQUFJO0FBRUYsb0JBQU0sU0FBUyxJQUFJLHFCQUFxQjtBQUFBLGdCQUN0QyxhQUFhO0FBQUEsa0JBQ1gsY0FBYyxJQUFJO0FBQUEsa0JBQ2xCLGFBQWEsSUFBSSxtQkFBbUIsUUFBUSxRQUFRLElBQUk7QUFBQTtBQUFBLGdCQUMxRDtBQUFBLGNBQ0YsQ0FBQztBQUdELG9CQUFNLEVBQUUsTUFBTSxJQUFJLE1BQU0sU0FBUyxHQUFHO0FBQ3BDLGtCQUFJLENBQUMsT0FBTztBQUNWLG9CQUFJLGFBQWE7QUFDakIsdUJBQU8sSUFBSSxJQUFJLEtBQUssVUFBVSxFQUFFLFNBQVMsd0NBQW1DLENBQUMsQ0FBQztBQUFBLGNBQ2hGO0FBR0Esb0JBQU0sY0FBYyxNQUFNLFFBQVEsNEJBQTRCLEVBQUU7QUFHaEUsb0JBQU0sVUFBVTtBQUFBLGdCQUNkLE9BQU8sRUFBRSxTQUFTLFlBQVk7QUFBQSxnQkFDOUIsVUFBVSxDQUFDLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUFBLGNBQ2hEO0FBR0Esb0JBQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxPQUFPLHNCQUFzQixPQUFPO0FBQzNELG9CQUFNLE9BQU8sT0FBTyxvQkFBb0IsUUFBUTtBQUdoRCxrQkFBSSxVQUFVLGdCQUFnQixrQkFBa0I7QUFDaEQsa0JBQUksSUFBSSxLQUFLLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUFBLFlBRWxDLFNBQVMsT0FBTztBQUNkLHNCQUFRLE1BQU0sbUNBQThCLEtBQUs7QUFDakQsa0JBQUksYUFBYTtBQUNqQixrQkFBSSxJQUFJLEtBQUssVUFBVSxFQUFFLFNBQVMsa0ZBQXNELE9BQU8sTUFBTSxRQUFRLENBQUMsQ0FBQztBQUFBLFlBQ2pIO0FBQUEsVUFDRixDQUFDO0FBQUEsUUFDSDtBQUFBLE1BQ0Y7QUFBQSxJQUNGO0FBQUE7QUFBQSxJQUVBLGNBQWM7QUFBQSxNQUNaLFNBQVMsQ0FBQyxjQUFjO0FBQUEsSUFDMUI7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
